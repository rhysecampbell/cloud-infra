#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# From the cloud database
viewData				 = 	SELECT si.station_name, si.xml_target_name, dv.value_id,dv.sensor_id,dv.creationtime,dv.nvalue,dv.status,dv.lane_no,dv.sensor_no,dv.stn_id,dv.created,dv.nvalue_str
							FROM 
							  oe.station_identity si,
							  oe.data_value dv
							WHERE
							  si.stn_id = dv.stn_id
							ORDER BY dv.creationtime DESC
							LIMIT 10

stationIdentity			=	SELECT si.xml_target_name,EXTRACT(EPOCH FROM si.entry_datetime) AS entry_datetime,si.station_name,EXTRACT(EPOCH FROM si.last_updated) AS last_updated,si.lat,si.lon,si.alt,si.region_id,si.image1_url,si.forecast_url
							FROM
							  oe.station_identity AS si
							LIMIT 200

stationIdentitySearch 	=	SELECT si.stn_id,si.xml_target_name,si.station_name,to_char(si.last_updated, 'yyyy-mm-dd hh24:mi:ss') AS lastupdated,
							si.lat,si.lon,si.alt,si.region_id,si.image1_url,si.forecast_url,si.country_id,string_agg(v.v_region_name,', ') AS vregions
							FROM oe.station_identity AS si
							LEFT JOIN oe.station_alias AS ref ON si.stn_id = ref.stn_id
							LEFT JOIN oe.station_alias_identity AS v ON v.v_region_id = ref.v_region_id
stationIdentitySearchGroupBy = group by si.stn_id,si.xml_target_name,si.station_name,si.last_updated,
								si.lat,si.lon,si.alt,si.region_id,si.image1_url,si.forecast_url,si.country_id

# stationMapSearch	=	SELECT si.xml_target_name,si.station_name,EXTRACT(EPOCH FROM si.last_updated) AS last_updated,si.region_id,si.country_id,si.org_id
# 						FROM
# 						  oe.station_identity AS si
# 						WHERE
# 							si.station_name LIKE ?
# 							AND si.xml_target_name LIKE ?
# 							AND si.region_id LIKE ?
# 						LIMIT 200
						
# stationIdentitySearchID= SELECT si.xml_target_name,si.station_name,EXTRACT(EPOCH FROM si.last_updated) AS last_updated,si.lat,si.lon,si.alt,si.region_id,si.image1_url,si.forecast_url
# 						FROM
# 						  oe.station_identity AS si
# 						WHERE
# 							si.stn_id = ?
# 							AND si.xml_target_name LIKE ?
# 							AND si.region_id LIKE ?
# 						LIMIT 500
# stationMapSearchID	=	SELECT si.xml_target_name,si.station_name,EXTRACT(EPOCH FROM si.last_updated) AS last_updated,si.region_id,si.country_id,si.org_id
# 						FROM
# 						  oe.station_identity AS si
# 						WHERE
# 							si.stn_id = ?
# 							AND si.xml_target_name LIKE ?
# 							AND si.region_id LIKE ?
# 						LIMIT 200

stationName				=	SELECT si.stn_id,si.station_name
							FROM oe.station_identity AS si
							WHERE LOWER(si.station_name) LIKE LOWER(?)
							LIMIT 200
xmlName					=	SELECT si.stn_id,si.xml_target_name
							FROM oe.station_identity AS si
							WHERE LOWER(si.xml_target_name) LIKE LOWER(?)
							LIMIT 200
region					=	SELECT DISTINCT si.region_id
							FROM oe.station_identity AS si
							WHERE si.region_id LIKE ?
vRegion					=	SELECT DISTINCT ai.v_region_id, ai.v_region_name
							FROM oe.station_alias_identity AS ai
							WHERE ai.v_region_name ILIKE ?
orgRegion				=	SELECT DISTINCT ON (LOWER(si.region_id)) si.org_id, si.region_id
							FROM oe.station_identity AS si
							WHERE LOWER(si.region_id) LIKE LOWER(?) OR LOWER(si.org_id) LIKE LOWER(?)
							ORDER BY LOWER(si.region_id)
organization			=	SELECT DISTINCT si.org_id
							FROM oe.station_identity AS si
							WHERE si.org_id LIKE ?
stationList				=	SELECT s.stn_id,s.xml_target_name,s.station_name,v.v_region_name
							FROM oe.station_identity AS s
							LEFT JOIN oe.station_alias AS m ON m.stn_id = s.stn_id
							LEFT JOIN oe.station_alias_identity AS v ON m.v_region_id = v.v_region_id

insertVregionMap		=	INSERT INTO oe.station_alias (stn_id,v_region_id,added_by,comments) VALUES (?,?,?,?)
selectVregionMap		=	SELECT stn_id AS id FROM oe.station_alias WHERE stn_id=? AND v_region_id=?
updateVregionMap		=	UPDATE oe.station_alias SET added_by=?,comments=? WHERE stn_id=? AND v_region_id=?
viewVregionMap			=	SELECT distinct(m.v_region_id,s.stn_id) AS unique,s.stn_id,s.station_name,s.xml_target_name,s.region_id,s.org_id,s.country_id,v.v_region_name,m.added_by AS addedby,m.comments,to_char(s.last_updated, 'yyyy-mm-dd hh24:mi:ss') AS lastupdated
							FROM oe.station_alias AS m
							LEFT JOIN oe.station_alias_identity as v ON m.v_region_id = v.v_region_id
							RIGHT JOIN oe.station_identity AS s ON m.stn_id = s.stn_id
deleteVregionMap		=	DELETE FROM oe.station_alias WHERE stn_id=?	AND v_region_id=?

selectvRegionID			=	SELECT v_region_id AS id FROM oe.station_alias_identity WHERE v_region_name=?
deleteVregionRef		=	DELETE FROM oe.station_alias WHERE v_region_id=?
deleteVregion			=	DELETE FROM oe.station_alias_identity WHERE v_region_id=?

renameVregion			=	UPDATE oe.station_alias_identity SET v_region_name=? WHERE v_region_id=?
renameRole				=	UPDATE public.user_roles SET role=? WHERE id=?

# From the CloudDB
stationNameSimple		=	SELECT si.stn_id AS id,si.station_name AS var
							FROM oe.station_identity AS si
							WHERE si.station_name IS NOT NULL
xmlNameSimple			=	SELECT si.stn_id AS id,si.xml_target_name AS var
							FROM oe.station_identity AS si
							WHERE si.xml_target_name IS NOT NULL
regionIDsimple			=	SELECT DISTINCT si.stn_id AS id, si.region_id AS var
							FROM oe.station_identity AS si
							WHERE si.region_id IS NOT NULL
orgIDsimple				=	SELECT si.stn_id AS id,org_id AS var
							FROM oe.station_identity AS si
							WHERE org_id IS NOT NULL
vRegionSimple			=	SELECT v_region_id AS id,v_region_name AS var FROM oe.station_alias_identity


# Add new vRegions:
selectvRegionName		=	SELECT v_region_id FROM oe.station_alias_identity
								WHERE v_region_name = ?
addvRegion				=	INSERT INTO oe.station_alias_identity (v_region_name,added_by) VALUES (?,?)

# Delete a vRegion
selectvRegionCount		=	SELECT count(*) FROM oe.station_alias AS a
							LEFT JOIN oe.station_alias_identity as i ON i.v_region_id = a.v_region_id
							WHERE i.v_region_name = ?
selectvRegionIDref		=	SELECT v_region_id AS id FROM oe.station_alias
								WHERE v_region_id = ?
selectRoleNameRef		=	SELECT role FROM public.user_roles
							WHERE id = ?
selectRoleCountRef		=	SELECT count(rid) AS count FROM public.user_roles_ref
								WHERE rid = ?
deletevRegion			=	DELETE FROM oe.station_alias_identity WHERE v_region_id = ?
deletevRegionREF		=	DELETE FROM oe.station_alias WHERE v_region_id = ?

# edit the different databases
selectID				=	SELECT stn_id FROM oe.station_identity WHERE stn_id = ?
updateData				=	UPDATE oe.station_identity SET

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# For the pager func
pagerCount				= SELECT count(*) FROM oe.station_alias

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# From the Metar database
metarvRegionSimple		=	SELECT v_region_id AS id,v_region_name AS var FROM oe.station_alias_identity

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# From the Auth database
userListSimple			=	SELECT id, username||' ('||comments||')' AS var
							FROM users
roleListSimple			=	SELECT id, role||' ('||role_description||')' AS var
							FROM user_roles

userList				=	SELECT id,username,comments FROM users WHERE username LIKE ?
userListTable			=	SELECT
								u.id,
								u.username,
								string_agg(r.role,', ') AS roles,
								u.comments,
								u.added_by,
								u.date_added
							FROM users AS u
							LEFT JOIN user_roles_ref AS f ON u.id = f.uid
							LEFT JOIN user_roles AS r ON r.id = f.rid
userListTableGroupBy	=	group by u.id,u.username,u.comments,u.added_by,u.date_added
setRoleProperties		=	UPDATE user_roles SET country_code=?,metar_data=?,ltg_data=?,graph_data=?,ticker=?,role_description=? WHERE id = ?
userGivenRoles			=	SELECT r.id,r.role,r.role_description,f.id AS ref_id
							FROM users AS u
							LEFT JOIN user_roles_ref AS f ON u.id = f.uid
							LEFT JOIN user_roles AS r ON r.id = f.rid
							WHERE u.id = ?
authSelectUser			=	SELECT id FROM users WHERE username = ?
userAdd					=	INSERT INTO users (username,password,added_by,comments) VALUES (?,?,?,?)
userAdd2				=	INSERT INTO user_roles_ref (uid,rid)
							SELECT u.id AS uid, r.id AS rid
							FROM user_roles AS r, users AS u
							WHERE r.id = ? AND u.username = ?
userAddRef				=	INSERT INTO user_roles_ref (uid,rid) VALUES (?,?)
userSelectRef			=	SELECT id FROM user_roles_ref WHERE uid=? AND rid=?
useDeleteRef			=	DELETE FROM user_roles_ref WHERE id=?
getUserID				=   SELECT id FROM users WHERE username = ?
#userSetRole			=	UPDATE user_roles_ref SET rid=? WHERE uid=?
#userAddRole			=	INSERT INTO user_roles_ref (uid,rid)
#							SELECT u.id AS uid, r.id AS rid
#							FROM user_roles AS r, users AS u
#							WHERE r.role = ? AND u.username = ?
userSetPassword			=	UPDATE users SET password=? WHERE id = ?
userDeleteRef			=	DELETE FROM user_roles_ref WHERE uid IN (
								SELECT id FROM users
								WHERE id = ?
							)
userDelete				=	DELETE FROM users WHERE id = ?

# Roles
authSelectRole			=	SELECT id FROM user_roles WHERE role = ?
authSelectRoleID		=	SELECT id FROM user_roles WHERE id = ?
authListRoles			=	SELECT id,role,role_description,country_code,metar_data,ltg_data,graph_data,ticker FROM user_roles
authListRolesTable		=	SELECT r.id,role,r.role_description,r.added_by,r.country_code,CAST(r.metar_data AS TEXT),CAST(r.ltg_data AS TEXT),
							CAST(r.graph_data AS TEXT),CAST(r.registered AS TEXT),CAST(r.ticker AS TEXT),count(u.id) AS user_count
							FROM user_roles AS r
							LEFT JOIN user_roles_ref AS f ON r.id = f.rid
							LEFT JOIN  users AS u ON u.id = f.uid
authListRolesTableGroupBy = GROUP BY r.id
authAddRole				=	INSERT INTO user_roles (role,added_by,role_description,metar_data,ltg_data,registered,graph_data,ticker,country_code) VALUES (?,?,?,?,?,TRUE,?,?,?)
authDeleteRole			=	DELETE FROM user_roles WHERE id = ?
authDeleteRoleRef		=	DELETE FROM user_roles_ref WHERE rid = ?
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------